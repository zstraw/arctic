/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.netease.arctic.ams.api;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2022-09-19")
public class OptimizerRegisterInfo implements org.apache.thrift.TBase<OptimizerRegisterInfo, OptimizerRegisterInfo._Fields>, java.io.Serializable, Cloneable, Comparable<OptimizerRegisterInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OptimizerRegisterInfo");

  private static final org.apache.thrift.protocol.TField OPTIMIZER_GROUP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("optimizerGroupName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CORE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("coreNumber", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField MEMORY_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("memorySize", org.apache.thrift.protocol.TType.I64, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new OptimizerRegisterInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new OptimizerRegisterInfoTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String optimizerGroupName; // required
  public int coreNumber; // required
  public long memorySize; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    OPTIMIZER_GROUP_NAME((short)1, "optimizerGroupName"),
    CORE_NUMBER((short)2, "coreNumber"),
    MEMORY_SIZE((short)3, "memorySize");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OPTIMIZER_GROUP_NAME
          return OPTIMIZER_GROUP_NAME;
        case 2: // CORE_NUMBER
          return CORE_NUMBER;
        case 3: // MEMORY_SIZE
          return MEMORY_SIZE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CORENUMBER_ISSET_ID = 0;
  private static final int __MEMORYSIZE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OPTIMIZER_GROUP_NAME, new org.apache.thrift.meta_data.FieldMetaData("optimizerGroupName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CORE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("coreNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MEMORY_SIZE, new org.apache.thrift.meta_data.FieldMetaData("memorySize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OptimizerRegisterInfo.class, metaDataMap);
  }

  public OptimizerRegisterInfo() {
  }

  public OptimizerRegisterInfo(
    java.lang.String optimizerGroupName,
    int coreNumber,
    long memorySize)
  {
    this();
    this.optimizerGroupName = optimizerGroupName;
    this.coreNumber = coreNumber;
    setCoreNumberIsSet(true);
    this.memorySize = memorySize;
    setMemorySizeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OptimizerRegisterInfo(OptimizerRegisterInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetOptimizerGroupName()) {
      this.optimizerGroupName = other.optimizerGroupName;
    }
    this.coreNumber = other.coreNumber;
    this.memorySize = other.memorySize;
  }

  public OptimizerRegisterInfo deepCopy() {
    return new OptimizerRegisterInfo(this);
  }

  @Override
  public void clear() {
    this.optimizerGroupName = null;
    setCoreNumberIsSet(false);
    this.coreNumber = 0;
    setMemorySizeIsSet(false);
    this.memorySize = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getOptimizerGroupName() {
    return this.optimizerGroupName;
  }

  public OptimizerRegisterInfo setOptimizerGroupName(@org.apache.thrift.annotation.Nullable java.lang.String optimizerGroupName) {
    this.optimizerGroupName = optimizerGroupName;
    return this;
  }

  public void unsetOptimizerGroupName() {
    this.optimizerGroupName = null;
  }

  /** Returns true if field optimizerGroupName is set (has been assigned a value) and false otherwise */
  public boolean isSetOptimizerGroupName() {
    return this.optimizerGroupName != null;
  }

  public void setOptimizerGroupNameIsSet(boolean value) {
    if (!value) {
      this.optimizerGroupName = null;
    }
  }

  public int getCoreNumber() {
    return this.coreNumber;
  }

  public OptimizerRegisterInfo setCoreNumber(int coreNumber) {
    this.coreNumber = coreNumber;
    setCoreNumberIsSet(true);
    return this;
  }

  public void unsetCoreNumber() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CORENUMBER_ISSET_ID);
  }

  /** Returns true if field coreNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetCoreNumber() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CORENUMBER_ISSET_ID);
  }

  public void setCoreNumberIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CORENUMBER_ISSET_ID, value);
  }

  public long getMemorySize() {
    return this.memorySize;
  }

  public OptimizerRegisterInfo setMemorySize(long memorySize) {
    this.memorySize = memorySize;
    setMemorySizeIsSet(true);
    return this;
  }

  public void unsetMemorySize() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MEMORYSIZE_ISSET_ID);
  }

  /** Returns true if field memorySize is set (has been assigned a value) and false otherwise */
  public boolean isSetMemorySize() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MEMORYSIZE_ISSET_ID);
  }

  public void setMemorySizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MEMORYSIZE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case OPTIMIZER_GROUP_NAME:
      if (value == null) {
        unsetOptimizerGroupName();
      } else {
        setOptimizerGroupName((java.lang.String)value);
      }
      break;

    case CORE_NUMBER:
      if (value == null) {
        unsetCoreNumber();
      } else {
        setCoreNumber((java.lang.Integer)value);
      }
      break;

    case MEMORY_SIZE:
      if (value == null) {
        unsetMemorySize();
      } else {
        setMemorySize((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case OPTIMIZER_GROUP_NAME:
      return getOptimizerGroupName();

    case CORE_NUMBER:
      return getCoreNumber();

    case MEMORY_SIZE:
      return getMemorySize();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case OPTIMIZER_GROUP_NAME:
      return isSetOptimizerGroupName();
    case CORE_NUMBER:
      return isSetCoreNumber();
    case MEMORY_SIZE:
      return isSetMemorySize();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof OptimizerRegisterInfo)
      return this.equals((OptimizerRegisterInfo)that);
    return false;
  }

  public boolean equals(OptimizerRegisterInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_optimizerGroupName = true && this.isSetOptimizerGroupName();
    boolean that_present_optimizerGroupName = true && that.isSetOptimizerGroupName();
    if (this_present_optimizerGroupName || that_present_optimizerGroupName) {
      if (!(this_present_optimizerGroupName && that_present_optimizerGroupName))
        return false;
      if (!this.optimizerGroupName.equals(that.optimizerGroupName))
        return false;
    }

    boolean this_present_coreNumber = true;
    boolean that_present_coreNumber = true;
    if (this_present_coreNumber || that_present_coreNumber) {
      if (!(this_present_coreNumber && that_present_coreNumber))
        return false;
      if (this.coreNumber != that.coreNumber)
        return false;
    }

    boolean this_present_memorySize = true;
    boolean that_present_memorySize = true;
    if (this_present_memorySize || that_present_memorySize) {
      if (!(this_present_memorySize && that_present_memorySize))
        return false;
      if (this.memorySize != that.memorySize)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetOptimizerGroupName()) ? 131071 : 524287);
    if (isSetOptimizerGroupName())
      hashCode = hashCode * 8191 + optimizerGroupName.hashCode();

    hashCode = hashCode * 8191 + coreNumber;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(memorySize);

    return hashCode;
  }

  @Override
  public int compareTo(OptimizerRegisterInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetOptimizerGroupName()).compareTo(other.isSetOptimizerGroupName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOptimizerGroupName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.optimizerGroupName, other.optimizerGroupName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCoreNumber()).compareTo(other.isSetCoreNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoreNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coreNumber, other.coreNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMemorySize()).compareTo(other.isSetMemorySize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemorySize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memorySize, other.memorySize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("OptimizerRegisterInfo(");
    boolean first = true;

    sb.append("optimizerGroupName:");
    if (this.optimizerGroupName == null) {
      sb.append("null");
    } else {
      sb.append(this.optimizerGroupName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("coreNumber:");
    sb.append(this.coreNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("memorySize:");
    sb.append(this.memorySize);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OptimizerRegisterInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public OptimizerRegisterInfoStandardScheme getScheme() {
      return new OptimizerRegisterInfoStandardScheme();
    }
  }

  private static class OptimizerRegisterInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<OptimizerRegisterInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OptimizerRegisterInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OPTIMIZER_GROUP_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.optimizerGroupName = iprot.readString();
              struct.setOptimizerGroupNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CORE_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.coreNumber = iprot.readI32();
              struct.setCoreNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MEMORY_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.memorySize = iprot.readI64();
              struct.setMemorySizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OptimizerRegisterInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.optimizerGroupName != null) {
        oprot.writeFieldBegin(OPTIMIZER_GROUP_NAME_FIELD_DESC);
        oprot.writeString(struct.optimizerGroupName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CORE_NUMBER_FIELD_DESC);
      oprot.writeI32(struct.coreNumber);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MEMORY_SIZE_FIELD_DESC);
      oprot.writeI64(struct.memorySize);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OptimizerRegisterInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public OptimizerRegisterInfoTupleScheme getScheme() {
      return new OptimizerRegisterInfoTupleScheme();
    }
  }

  private static class OptimizerRegisterInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<OptimizerRegisterInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OptimizerRegisterInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetOptimizerGroupName()) {
        optionals.set(0);
      }
      if (struct.isSetCoreNumber()) {
        optionals.set(1);
      }
      if (struct.isSetMemorySize()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetOptimizerGroupName()) {
        oprot.writeString(struct.optimizerGroupName);
      }
      if (struct.isSetCoreNumber()) {
        oprot.writeI32(struct.coreNumber);
      }
      if (struct.isSetMemorySize()) {
        oprot.writeI64(struct.memorySize);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OptimizerRegisterInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.optimizerGroupName = iprot.readString();
        struct.setOptimizerGroupNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.coreNumber = iprot.readI32();
        struct.setCoreNumberIsSet(true);
      }
      if (incoming.get(2)) {
        struct.memorySize = iprot.readI64();
        struct.setMemorySizeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

